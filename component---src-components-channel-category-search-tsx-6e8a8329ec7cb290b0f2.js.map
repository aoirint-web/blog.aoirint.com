{"version":3,"file":"component---src-components-channel-category-search-tsx-6e8a8329ec7cb290b0f2.js","mappings":"4KA6FA,UA/EkF,SAAC,GAG5E,IAFLA,EAEI,EAFJA,YACAC,EACI,EADJA,KAEMC,EAAU,YAAaF,EAAcG,OAAOH,EAAW,SAAe,GACtEI,EAAW,aAAcJ,EAAcG,OAAOH,EAAW,UAAgB,GAE/E,OACE,gCACE,gBAAC,IAAD,KACE,6BAAQE,EAAR,aAA2BE,EAA3B,YACA,wBAAMC,KAAK,SAASC,QAAQ,aAE9B,gBAAC,IAAD,MACA,2BAASC,UAAU,WACjB,uBAAKA,UAAU,aACb,sBAAIA,UAAU,mBACZ,qBAAGC,KAAI,YAAcN,EAAd,KAAP,UACUA,IAGZ,sBAAIK,UAAU,mBAAd,SACSH,GAET,0BACGH,EAAKQ,MAAMC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACpB,uBAAKC,IAAKD,EAAKE,IACb,gBAAC,IAAD,CAAcC,KAAMH,IACpB,sBAAIL,UAAU,mB,gECoC9B,IAlDkD,SAAC,GAM5C,IAAD,MALFQ,KACEC,EAIA,EAJAA,KACAC,EAGA,EAHAA,OACAC,EAEA,EAFAA,YAGIC,EAAqB,uBAAwBF,EAASA,EAAOE,mBAAqB,QAClFC,EAAoC,UAAvBD,EAAA,IAAqCA,EAArC,IAA6D,IAE1EE,EAA4B,OAArBH,MAAAA,OAAA,EAAAA,EAAaG,MAAeC,GAAAA,CAAMJ,MAAAA,OAAD,EAACA,EAAaG,MAAME,OAAO,cAAgB,GACnFC,EAAkC,OAAxBN,MAAAA,OAAA,EAAAA,EAAaM,SAAkBF,GAAAA,CAAMJ,MAAAA,OAAD,EAACA,EAAaM,SAASD,OAAO,cAAgB,GAElG,OACI,uBAAKhB,UAAU,QACb,uBAAKA,UAAU,IACb,gBAAC,EAAAkB,KAAD,CAAMC,GAAE,GAAKN,EAAaJ,EAAQ,aAAW,SAC1CE,MAAAA,OADH,EACGA,EAAaS,OAEfN,GAAQG,EACP,uBAAKjB,UAAU,YAAY,aAAW,cAAtC,IAEE,wBAAM,aAAW,eAAec,GAC/BA,GAAQG,EAAU,MAAQ,GAC3B,wBAAM,aAAW,eAAeA,GAJlC,KAOE,GACJ,uBAAKjB,UAAU,YAAY,aAAW,QACV,OAAzBW,MAAAA,OAAA,EAAAA,EAAad,UACZ,gCACE,gBAAC,EAAAqB,KAAD,CAAMC,GAAE,aAAcR,MAAAA,OAAd,EAAcA,EAAahB,SAA3B,cAA+CgB,MAAAA,OAA/C,EAA+CA,EAAad,UAA5D,IAAyEG,UAAU,OAAO,aAAW,YAC1GW,MAAAA,OADH,EACGA,EAAad,UAEhB,wBAAMG,UAAU,QAAhB,MAIA,GACHW,MAAAA,GAXH,UAWGA,EAAaU,YAXhB,aAWG,EAAmBjB,KAAI,SAACkB,GAAD,OACtB,gBAAC,EAAAJ,KAAD,CAAMZ,IAAKgB,EAAKH,GAAE,aAAcR,MAAAA,OAAd,EAAcA,EAAahB,SAA3B,SAA2C2B,EAA3C,IAAmDtB,UAAU,OAAO,aAAW,OAC9FsB","sources":["webpack://blog-aoirint-com/./src/components/ChannelCategorySearch.tsx","webpack://blog-aoirint-com/./src/components/PostListItem.tsx"],"sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql, PageProps } from \"gatsby\"\n\nimport icon from '../images/icon.png'\nimport {\n  Navbar,\n} from '../components'\n\nimport {\n  GetChannelCategorySearchQuery\n} from '../../generated/graphql-types'\nimport PostListItem from './PostListItem'\n\nconst ChannelCategorySearch: React.FC<PageProps<GetChannelCategorySearchQuery>> = ({\n  pageContext,\n  data,\n}) => {\n  const channel = 'channel' in pageContext ? String(pageContext['channel']) : ''\n  const category = 'category' in pageContext ? String(pageContext['category']) : ''\n\n  return (\n    <>\n      <Helmet>\n        <title>{channel}/category/{category} · えやみぐさ</title>\n        <meta name=\"robots\" content=\"noindex\" />\n      </Helmet>\n      <Navbar />\n      <section className='section'>\n        <div className='container'>\n          <h1 className='title is-6 mb-4'>\n            <a href={`/channel/${channel}/`}>\n              チャンネル: {channel}\n            </a>\n          </h1>\n          <h2 className='title is-4 mb-4'>\n            カテゴリ: {category}\n          </h2>\n          <ul>\n            {data.posts.edges.map(({ node }) => (\n              <div key={node.id}>\n                <PostListItem post={node} />\n                <hr className='my-1' />\n              </div>\n            ))}\n          </ul>\n        </div>\n      </section>\n    </>\n  )\n}\n\nexport const pageQuery = graphql`\n  query GetChannelCategorySearch(\n    $channel: String!\n    $category: String!\n  ) {\n    posts: allMdx(\n      filter: {\n        frontmatter: {\n          channel: {eq: $channel}\n          category: {eq: $category}\n        }\n        fields: {draft: {eq: false}}\n      }\n      sort: {\n        fields: [frontmatter___lastModified]\n        order: DESC\n      }\n    ) {\n      edges {\n        node {\n          id\n          slug\n          parent {\n            ... on File {\n              sourceInstanceName\n            }\n          }\n          frontmatter {\n            title\n            date\n            updated\n            channel\n            category\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default ChannelCategorySearch\n","import React from 'react'\nimport dayjs from 'dayjs'\nimport { Link } from 'gatsby'\n\nexport interface Parent {\n    sourceInstanceName: string\n}\n\nexport interface Frontmatter {\n    title: string\n    date?: string\n    updated?: string\n    channel?: string\n    category?: string\n    tags?: string[]\n}\n\nexport interface Post {\n  id: string\n  slug?: string\n  parent?: {} | Parent\n  frontmatter?: Frontmatter\n}\n\nexport interface PostListItemProps {\n  post: Post\n}\n\nconst PostListItem: React.FC<PostListItemProps> = ({\n    post: {\n      slug,\n      parent,\n      frontmatter,\n    },\n}) => {\n    const sourceInstanceName = 'sourceInstanceName' in parent ? parent.sourceInstanceName : 'pages'\n    const pathPrefix = sourceInstanceName !== 'pages' ? `/${sourceInstanceName}/` : '/'\n\n    const date = frontmatter?.date != null ? dayjs(frontmatter?.date).format('YYYY-MM-DD') : ''\n    const updated = frontmatter?.updated != null ? dayjs(frontmatter?.updated).format('YYYY-MM-DD') : ''\n\n    return (\n        <div className='mb-2'>\n          <div className=''>\n            <Link to={`${pathPrefix}${slug}`} data-label='title'>\n              {frontmatter?.title}\n            </Link>\n            {date || updated ? (\n              <div className='is-size-7' data-label='dateString'>\n                [\n                <span data-label='dateCreated'>{date}</span>\n                {date && updated ? ' / ' : ''}\n                <span data-label='dateUpdated'>{updated}</span>\n                ]\n              </div>\n            ) : ''}\n            <div className='is-size-7' data-label='tags'>\n              {frontmatter?.category != null ? (\n                <>\n                  <Link to={`/channel/${frontmatter?.channel}/category/${frontmatter?.category}/`} className='mr-2' data-label='category'>\n                    {frontmatter?.category}\n                  </Link>\n                  <span className='mr-2'>\n                    |\n                  </span>\n                </>\n              ) : ''}\n              {frontmatter?.tags?.map((tag) => (\n                <Link key={tag} to={`/channel/${frontmatter?.channel}/tags/${tag}/`} className='mr-2' data-label='tag'>\n                  {tag}\n                </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n    )\n}\n\nexport default PostListItem\n"],"names":["pageContext","data","channel","String","category","name","content","className","href","posts","edges","map","node","key","id","post","slug","parent","frontmatter","sourceInstanceName","pathPrefix","date","dayjs","format","updated","Link","to","title","tags","tag"],"sourceRoot":""}