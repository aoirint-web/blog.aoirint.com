{
    "componentChunkName": "component---src-layouts-entry-page-layout-tsx",
    "path": "/entry/2020/python_opengl_glfw_show_opencv_image/",
    "result": {"data":{"mdx":{"id":"da16d221-cb1c-5c85-b19c-6e8b02e8709f","slug":"2020/python_opengl_glfw_show_opencv_image/","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"OpenGL 2.1/4.1（GLFW）でOpenCVの画像を表示する（Python, Mac）\",\n  \"date\": \"2020-03-23 01:11:57\",\n  \"draft\": false,\n  \"channel\": \"技術ノート\",\n  \"category\": \"OpenCV\",\n  \"tags\": [\"OpenCV\", \"OpenGL\", \"ComputerVision\", \"Python\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"opengl-2141glfwでopencvの画像を表示するpython-mac\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#opengl-2141glfw%E3%81%A7opencv%E3%81%AE%E7%94%BB%E5%83%8F%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8Bpython-mac\",\n    \"aria-label\": \"opengl 2141glfwでopencvの画像を表示するpython mac permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"OpenGL 2.1/4.1\\uFF08GLFW\\uFF09\\u3067OpenCV\\u306E\\u753B\\u50CF\\u3092\\u8868\\u793A\\u3059\\u308B\\uFF08Python, Mac\\uFF09\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"pip3 install PyOpenGL glfw\\n\")), mdx(\"p\", null, \"\\u30E2\\u30B8\\u30E5\\u30FC\\u30EB\\u30D0\\u30FC\\u30B8\\u30E7\\u30F3\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"PyOpenGL==3.1.5\\nglfw==1.11.0\\n\")), mdx(\"p\", null, \"\\u30B7\\u30B9\\u30C6\\u30E0\\u306EOpenGL\\u30D0\\u30FC\\u30B8\\u30E7\\u30F3\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"Vendor : b'Intel Inc.'\\nGPU : b'Intel Iris OpenGL Engine'\\nOpenGL version : b'4.1 INTEL-14.4.23'\\n\")), mdx(\"h3\", {\n    \"id\": \"opengl-21\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#opengl-21\",\n    \"aria-label\": \"opengl 21 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"OpenGL 2.1\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/mcfletch/pyopengl\"\n  }, \"mcfletch/pyopengl: Repository for the PyOpenGL Project\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://codelabo.com/posts/20200228175104\"\n  }, \"Python3\\u3067\\u59CB\\u3081\\u308BOpenGL4 - CodeLabo\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://codelabo.com/posts/20200228180254\"\n  }, \"Python GLFW\\u3067OpenGL\\u30D0\\u30FC\\u30B8\\u30E7\\u30F3\\u6307\\u5B9A\\u3068\\u30A6\\u30A3\\u30F3\\u30C9\\u30A6\\u8868\\u793A - CodeLabo\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://qiita.com/a2kiti/items/39eba7616036fdd6fd36\"\n  }, \"Python\\u3067OpenCV\\u306E\\u753B\\u50CF\\u3092OpenGL\\u3067\\u8868\\u793A\\u3059\\u308B - Qiita\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"Vendor : b'Intel Inc.'\\nGPU : b'Intel Iris OpenGL Engine'\\nOpenGL version : b'2.1 INTEL-14.4.23'\\n\")), mdx(\"h4\", {\n    \"id\": \"gldrawpixels\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#gldrawpixels\",\n    \"aria-label\": \"gldrawpixels permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"glDrawPixels\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import cv2\\nfrom OpenGL.GL import *\\nimport glfw\\n\\nif __name__ == '__main__':\\n    img = cv2.imread('lena.png', 1)\\n    img_gl = cv2.cvtColor(cv2.flip(img, 0), cv2.COLOR_BGR2RGB)\\n\\n    glfw.init()\\n\\n    # These parameters need to be changed according to your environment.\\n    # Mac: https://support.apple.com/ja-jp/HT202823\\n    # glfw.window_hint(glfw.CONTEXT_VERSION_MAJOR, 4)\\n    # glfw.window_hint(glfw.CONTEXT_VERSION_MINOR, 1)\\n    # glfw.window_hint(glfw.OPENGL_FORWARD_COMPAT, True)\\n    # glfw.window_hint(glfw.OPENGL_PROFILE, glfw.OPENGL_CORE_PROFILE)\\n\\n    width = img.shape[1]\\n    height = img.shape[0]\\n    window = glfw.create_window(width, height, 'Lena', None, None)\\n    glfw.make_context_current(window)\\n\\n    print('Vendor :', glGetString(GL_VENDOR))\\n    print('GPU :', glGetString(GL_RENDERER))\\n    print('OpenGL version :', glGetString(GL_VERSION))\\n\\n    while not glfw.window_should_close(window):\\n        glClearColor(0, 0, 0, 1)\\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\\n\\n        glDrawPixels(width, height, GL_RGB, GL_UNSIGNED_BYTE, img_gl)\\n\\n        glfw.swap_buffers(window)\\n        glfw.poll_events()\\n\\n    glfw.destroy_window(window)\\n    glfw.terminate()\\n\")), mdx(\"h4\", {\n    \"id\": \"texture\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#texture\",\n    \"aria-label\": \"texture permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Texture\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import cv2\\nfrom OpenGL.GL import *\\nimport glfw\\n\\nif __name__ == '__main__':\\n    img = cv2.imread('lena.png', 1)\\n    img_gl = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\\n\\n    glfw.init()\\n\\n    # These parameters need to be changed according to your environment.\\n    # Mac: https://support.apple.com/ja-jp/HT202823\\n    # glfw.window_hint(glfw.CONTEXT_VERSION_MAJOR, 4)\\n    # glfw.window_hint(glfw.CONTEXT_VERSION_MINOR, 1)\\n    # glfw.window_hint(glfw.OPENGL_FORWARD_COMPAT, True)\\n    # glfw.window_hint(glfw.OPENGL_PROFILE, glfw.OPENGL_CORE_PROFILE)\\n\\n    window = glfw.create_window(256, 256, 'Lena', None, None)\\n    glfw.make_context_current(window)\\n\\n    print('Vendor :', glGetString(GL_VENDOR))\\n    print('GPU :', glGetString(GL_RENDERER))\\n    print('OpenGL version :', glGetString(GL_VERSION))\\n\\n    height, width = img.shape[:2]\\n    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, img_gl)\\n\\n    while not glfw.window_should_close(window):\\n        glClearColor(0, 0, 0, 1)\\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\\n\\n        glEnable(GL_TEXTURE_2D)\\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)\\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)\\n\\n        glBegin(GL_QUADS)\\n        glTexCoord2d(0.0, 1.0)\\n        glVertex3d(-1.0, -1.0, 0.0)\\n        glTexCoord2d(1.0, 1.0)\\n        glVertex3d(1.0, -1.0, 0.0)\\n        glTexCoord2d(1.0, 0.0)\\n        glVertex3d(1.0, 1.0, 0.0)\\n        glTexCoord2d(0.0, 0.0)\\n        glVertex3d(-1.0, 1.0, 0.0)\\n        glEnd()\\n\\n        glfw.swap_buffers(window)\\n        glfw.poll_events()\\n\\n    glfw.destroy_window(window)\\n    glfw.terminate()\\n\")), mdx(\"h3\", {\n    \"id\": \"opengl-41--glsl\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#opengl-41--glsl\",\n    \"aria-label\": \"opengl 41  glsl permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"OpenGL 4.1 / GLSL\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://codelabo.com/posts/20200228182137\"\n  }, \"Python\\u3067VAO\\u306B\\u3088\\u308BGLSL\\u30B7\\u30A7\\u30FC\\u30C0\\u30FC\\u30D7\\u30ED\\u30B0\\u30E9\\u30DF\\u30F3\\u30B0\\uFF01 - CodeLabo\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://community.khronos.org/t/suspected-fragment-shader-problem-no-color-opengl-4-glfw-3-glew/70399\"\n  }, \"Suspected fragment shader problem, No color, OpenGL 4, GLFW 3, GLEW - OpenGL / OpenGL: Basic Coding - Khronos Forums\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"marina.sys.wakayama-u.ac.jp/~tokoi/?date=20040914\"\n  }, \"\\u5E8A\\u4E95\\u7814\\u7A76\\u5BA4 - \\u7B2C\\uFF12\\u56DE \\u30C6\\u30AF\\u30B9\\u30C1\\u30E3\\u306E\\u5272\\u308A\\u5F53\\u3066\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"Vendor : b'Intel Inc.'\\nGPU : b'Intel Iris OpenGL Engine'\\nOpenGL version : b'4.1 INTEL-14.4.23'\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import sys\\nfrom OpenGL.GL import *\\nimport glfw\\nimport numpy as np\\nimport cv2\\n\\n\\nvertex_shader_text = '''\\n#version 410 core\\n\\nin vec3 vPosition;\\nout vec2 vTextureCoord;\\n\\nvoid main(void) {\\n    vTextureCoord = vec2((vPosition.x + 1.0) / 2, (vPosition.y + 1.0) / 2);\\n    gl_Position = vec4(vPosition, 1.0);\\n}\\n'''\\n\\nfragment_shader_text = '''\\n#version 410 core\\n\\nuniform sampler2D vTexture;\\nin vec2 vTextureCoord;\\nout vec4 flagColor;\\n\\nvoid main(void) {\\n    flagColor = texture(vTexture, vTextureCoord).rgba;\\n}\\n'''\\n\\ndef init_context():\\n    print('Initializing context..')\\n    glfw.init()\\n\\n    glfw.window_hint(glfw.CONTEXT_VERSION_MAJOR, 4)\\n    glfw.window_hint(glfw.CONTEXT_VERSION_MINOR, 1)\\n    glfw.window_hint(glfw.OPENGL_FORWARD_COMPAT, True)\\n    glfw.window_hint(glfw.OPENGL_PROFILE, glfw.OPENGL_CORE_PROFILE)\\n\\n    global window\\n    window = glfw.create_window(512, 512, __file__, None, None)\\n    glfw.make_context_current(window)\\n\\n    print('Vendor :', glGetString(GL_VENDOR))\\n    print('GPU :', glGetString(GL_RENDERER))\\n    print('OpenGL version :', glGetString(GL_VERSION))\\n\\ndef init_texture():\\n    print('Initializing texture..')\\n\\n    img = cv2.imread('lena.png', 1)\\n    img_gl = cv2.cvtColor(cv2.flip(img, 0), cv2.COLOR_BGR2RGB)\\n\\n    global width, height\\n    height, width = img.shape[:2]\\n\\n    global texture\\n    texture = glGenTextures(1)\\n\\n    glActiveTexture(GL_TEXTURE0)\\n    glBindTexture(GL_TEXTURE_2D, texture)\\n\\n    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)\\n    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)\\n\\n    glPixelStorei(GL_UNPACK_ALIGNMENT, 1)\\n    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, img_gl)\\n\\ndef init_shader():\\n    print('Initializing shader..')\\n\\n    global vertex_shader\\n    vertex_shader = glCreateShader(GL_VERTEX_SHADER)\\n    glShaderSource(vertex_shader, vertex_shader_text)\\n    glCompileShader(vertex_shader)\\n    if not glGetShaderiv(vertex_shader, GL_COMPILE_STATUS):\\n        print('Vertex shader is not OK')\\n        print(glGetShaderInfoLog(vertex_shader))\\n        sys.exit(1)\\n    else:\\n        print('Vertex shader is OK')\\n\\n    global fragment_shader\\n    fragment_shader = glCreateShader(GL_FRAGMENT_SHADER)\\n    glShaderSource(fragment_shader, fragment_shader_text)\\n    glCompileShader(fragment_shader)\\n    if not glGetShaderiv(fragment_shader, GL_COMPILE_STATUS):\\n        print('Fragment shader is not OK')\\n        print(glGetShaderInfoLog(fragment_shader))\\n        sys.exit(1)\\n    else:\\n        print('Fragment shader is OK')\\n\\n    global program\\n    program = glCreateProgram()\\n    glAttachShader(program, vertex_shader)\\n    glDeleteShader(vertex_shader)\\n    glAttachShader(program, fragment_shader)\\n    glDeleteShader(fragment_shader)\\n    glLinkProgram(program)\\n    if not glGetProgramiv(program, GL_LINK_STATUS):\\n        print('Shader program is not OK')\\n        print(glGetProgramInfoLog(program))\\n        sys.exit(1)\\n    else:\\n        print('Shader program is OK')\\n\\ndef init_vao():\\n    print('Initializing vao..')\\n\\n    # anti-clockwise\\n    vertices = np.array([\\n        -1.0, -1.0, 0.0, # left bottom\\n        1.0, -1.0, 0.0, # right bottom\\n        -1.0, 1.0, 0.0, # left top\\n\\n        -1.0, 1.0, 0.0, # left top\\n        1.0, -1.0, 0.0, # right bottom\\n        1.0, 1.0, 0.0, # right top\\n    ], dtype=np.float32)\\n\\n    global vertex_vbo\\n    vertex_vbo = glGenBuffers(1)\\n\\n    global vertex_vao\\n    vertex_vao = glGenVertexArrays(1)\\n    glBindVertexArray(vertex_vao)\\n\\n    glEnableVertexAttribArray(0)\\n\\n    glBindBuffer(GL_ARRAY_BUFFER, vertex_vbo)\\n    glBufferData(GL_ARRAY_BUFFER, vertices.nbytes, vertices, GL_STATIC_DRAW)\\n    glVertexAttribPointer(0, 3, GL_FLOAT, False, 0, None)\\n\\n    glBindVertexArray(0)\\n\\ndef render():\\n    glUseProgram(program)\\n\\n    glUniform1i(glGetUniformLocation(program, 'vTexture'), 0)\\n\\n    glBindVertexArray(vertex_vao)\\n    glDrawArrays(GL_TRIANGLES, 0, 6)\\n    glBindVertexArray(0)\\n\\nif __name__ == '__main__':\\n    init_context()\\n    init_texture()\\n    init_shader()\\n    init_vao()\\n\\n    print('Start rendering..')\\n    while not glfw.window_should_close(window):\\n        glClearColor(0, 0, 0, 1)\\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\\n\\n        render()\\n\\n        glfw.swap_buffers(window)\\n        glfw.poll_events()\\n\\n    glfw.destroy_window(window)\\n    glfw.terminate()\\n\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://pyopengl.sourceforge.net/documentation/\"\n  }, \"PyOpenGL Documentation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://pypi.org/project/PyOpenGL/\"\n  }, \"PyOpenGL \\xB7 PyPI\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://pypi.org/project/glfw/\"\n  }, \"glfw \\xB7 PyPI\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"OpenGL 2.1/4.1（GLFW）でOpenCVの画像を表示する（Python, Mac） モジュールバージョン システムのOpenGLバージョン OpenGL 2.1 mcfletch/pyopengl: Repository for the PyOpenGL…","tableOfContents":{"items":[{"url":"#opengl-2141glfwでopencvの画像を表示するpython-mac","title":"OpenGL 2.1/4.1（GLFW）でOpenCVの画像を表示する（Python, Mac）","items":[{"items":[{"url":"#opengl-21","title":"OpenGL 2.1","items":[{"url":"#gldrawpixels","title":"glDrawPixels"},{"url":"#texture","title":"Texture"}]},{"url":"#opengl-41--glsl","title":"OpenGL 4.1 / GLSL"}]}]}]},"frontmatter":{"title":"OpenGL 2.1/4.1（GLFW）でOpenCVの画像を表示する（Python, Mac）","date":"2020-03-23T01:11:57.000Z","updated":null,"noindex":null,"channel":"技術ノート","category":"OpenCV","tags":["OpenCV","OpenGL","ComputerVision","Python"]}}},"pageContext":{"id":"da16d221-cb1c-5c85-b19c-6e8b02e8709f"}},
    "staticQueryHashes": []}