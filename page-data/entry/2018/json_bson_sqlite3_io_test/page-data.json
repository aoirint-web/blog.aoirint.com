{
    "componentChunkName": "component---src-layouts-entry-page-layout-tsx",
    "path": "/entry/2018/json_bson_sqlite3_io_test/",
    "result": {"data":{"mdx":{"id":"07ef5557-3071-5753-b3c7-ab4f5247d9ae","slug":"2018/json_bson_sqlite3_io_test/","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"json, bson, sqlite3 IOの実験メモ\",\n  \"date\": \"2018-12-15 10:56:18\",\n  \"draft\": false,\n  \"channel\": \"技術ノート\",\n  \"category\": \"Python\",\n  \"tags\": [\"Python\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"json-bson-sqlite3-ioの実験メモ\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#json-bson-sqlite3-io%E3%81%AE%E5%AE%9F%E9%A8%93%E3%83%A1%E3%83%A2\",\n    \"aria-label\": \"json bson sqlite3 ioの実験メモ permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"json, bson, sqlite3 IO\\u306E\\u5B9F\\u9A13\\u30E1\\u30E2\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Windows 10\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Python 3.6.6\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bson==0.5.7\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SSD\")), mdx(\"h2\", {\n    \"id\": \"json\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#json\",\n    \"aria-label\": \"json permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"JSON\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import json\\nimport random\\nimport time\\n\\nfile = 'test.tmp'\\nN = 500\\n\\n# Generate\\nstart = time.time()\\nentries = []\\nfor i in range(N):\\n    title = ''.join([ chr(random.randint(ord('\\u3042'), ord('\\u3093')+1)) for i in range(32) ])\\n    body = ''.join([ chr(random.randint(ord('\\u3042'), ord('\\u3093')+1)) for i in range(30000) ])\\n    entries.append({\\n        'id': i,\\n        'title': title,\\n        'body': body,\\n    })\\n\\ndata = {\\n    'entries': entries,\\n}\\n\\nend = time.time()\\nprint('Generate: %.1fs' % (end - start, ))\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Generate: 38.6s\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import os\\n\\n# Write\\nstart = time.time()\\nwith open(file, 'w', encoding='utf-8') as fp:\\n    json.dump(data, fp, ensure_ascii=False)\\n\\nend = time.time()\\nprint('Write: %.3fs' % (end - start, ))\\n\\nprint('%.2fMB' % (os.path.getsize(file)/(1024**2), ))\\n\\n# Read\\nstart = time.time()\\nwith open(file, 'r', encoding='utf-8') as fp:\\n    data = json.load(fp)\\n\\nend = time.time()\\nprint('Read: %.3fs' % (end - start, ))\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Write: 0.252s\\n42.98MB\\nRead: 0.214s\\n\")), mdx(\"h2\", {\n    \"id\": \"bson\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#bson\",\n    \"aria-label\": \"bson permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"BSON\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"pip install bson\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import bson\\n\\n# Write\\nstart = time.time()\\ns = bson.dumps(data)\\nprint('%.2fMB' % (len(s)/(1024**2), ))\\n\\ndumpEnd = time.time()\\n\\nwith open(file, 'wb') as fp:\\n    fp.write(s)\\n\\nend = time.time()\\n\\nprint('Write: %.3fs (Dump: %.3fs)' % (end - start, dumpEnd - start))\\n\\n\\n# Read\\nstart = time.time()\\n\\nwith open(file, 'rb') as fp:\\n    s = fp.read()\\n\\nloadStart = time.time()\\n\\ndata = bson.loads(s)\\nend = time.time()\\n\\nprint('Read: %.3fs (Load: %.3fs)' % (end - start, end - loadStart))\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"42.98MB\\nWrite: 0.830s (Dump: 0.638s)\\nRead: 0.156s (Load: 0.095s)\\n\")), mdx(\"h2\", {\n    \"id\": \"sqlite3\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#sqlite3\",\n    \"aria-label\": \"sqlite3 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"SQLite3\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import sqlite3\\n\\nif os.path.exists(file):\\n    os.unlink(file)\\n\\nstart = time.time()\\nwith sqlite3.connect(file) as db:\\n    cur = db.cursor()\\n\\n    cur.execute('CREATE TABLE entries(id INTEGER AUTO INCREMENT, title TEXT, body TEXT)')\\n    for entry in data['entries']:\\n        cur.execute('INSERT INTO entries VALUES(?,?,?)', (entry['id'], entry['title'], entry['body'], ))\\n    \\nend = time.time()\\n\\nprint('Write: %.3fs' % (end - start, ))\\n\\nstart = time.time()\\nwith sqlite3.connect(file) as db:\\n    cur = db.cursor()\\n\\n    results = []\\n    for row in cur.execute('SELECT * FROM entries'):\\n        results.append(row)\\n\\nend = time.time()\\n\\nprint('Read: %.3fs' % (end - start, ))\\n\\n\\nprint('%.2fMB' % (os.path.getsize(file)/(1024**2), ))\\n\\ndb.close()\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Write: 1.093s\\nRead: 0.243s\\n43.22MB\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"json, bson, sqlite3 IOの実験メモ Windows 10 Python 3.6.6 bson==0.5.7 SSD JSON BSON SQLite3","tableOfContents":{"items":[{"url":"#json-bson-sqlite3-ioの実験メモ","title":"json, bson, sqlite3 IOの実験メモ","items":[{"url":"#json","title":"JSON"},{"url":"#bson","title":"BSON"},{"url":"#sqlite3","title":"SQLite3"}]}]},"frontmatter":{"title":"json, bson, sqlite3 IOの実験メモ","date":"2018-12-15T10:56:18.000Z","updated":null,"noindex":null,"channel":"技術ノート","category":"Python","tags":["Python"]}}},"pageContext":{"id":"07ef5557-3071-5753-b3c7-ab4f5247d9ae"}},
    "staticQueryHashes": []}