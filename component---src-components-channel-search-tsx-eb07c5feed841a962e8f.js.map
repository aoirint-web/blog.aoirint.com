{"version":3,"file":"component---src-components-channel-search-tsx-eb07c5feed841a962e8f.js","mappings":"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","sources":["webpack://blog-aoirint-com/./src/components/ChannelSearch.tsx","webpack://blog-aoirint-com/./src/components/PostListItem.tsx"],"sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql, PageProps } from \"gatsby\"\n\nimport icon from '../images/icon.png'\nimport {\n  Navbar,\n} from '../components'\n\nimport {\n  GetChannelSearchQuery\n} from '../../generated/graphql-types'\nimport PostListItem from './PostListItem'\nimport ChannelInfos from './ChannelInfos'\n\nconst ChannelSearch: React.FC<PageProps<GetChannelSearchQuery>> = ({\n  pageContext,\n  data,\n}) => {\n  const channel = 'channel' in pageContext ? String(pageContext['channel']) : ''\n  const channelInfo = ChannelInfos.filter((channeInfo) => channeInfo.key === channel)?.[0]\n\n  return (\n    <>\n      <Helmet>\n        <title>チャンネル: {channel} · えやみぐさ</title>\n        {channelInfo?.indexNoIndex ? (\n          <meta name=\"robots\" content=\"noindex\" />\n        ) : ''}\n      </Helmet>\n      <Navbar />\n      <section className='section'>\n        <div className='container'>\n          <h1 className='title is-4 mb-4'>\n            チャンネル: {channel}\n          </h1>\n          <div className='content'>\n            <p>\n              {channelInfo?.description}\n            </p>\n          </div>\n          {channelInfo?.indexCategoryIndex ? (\n            <>\n              <h2 className='title is-5 mb-3'>\n                最近の投稿\n              </h2>\n              <div className='mt-4 mb-5'>\n                {data.recentPosts.edges.map(({ node }) => (\n                  <div key={node.id}>\n                    <PostListItem post={node} />\n                    <hr className='my-1' />\n                  </div>\n                ))}\n              </div>\n              <h2 className='title is-5 mb-3'>\n                カテゴリ一覧\n              </h2>\n              <div className='columns is-multiline'>\n                {data.posts.categories.map((category) => (\n                  <div key={category.fieldValue} className='column is-one-quarter'>\n                    <div className='m-1'>\n                      <h3 className='title is-5 my-2'>\n                        <a href={`/channel/${channel}/category/${category.fieldValue}/`}>\n                          {category.fieldValue}\n                        </a>\n                      </h3>\n                      <div>\n                        {category.edges.map(({ node }) => (\n                          <div key={node.id}>\n                            <PostListItem post={node} />\n                            <hr className='my-1' />\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </>\n          ) : (\n            <>\n              <ul>\n                {data.posts.edges.map(({ node }) => (\n                  <div key={node.id}>\n                    <PostListItem post={node} />\n                    <hr className='my-1' />\n                  </div>\n                ))}\n              </ul>\n            </>\n          )}\n        </div>\n      </section>\n    </>\n  )\n}\n\nexport const pageQuery = graphql`\n  query GetChannelSearch(\n    $channel: String!\n  ) {\n    recentPosts: allMdx(\n      filter: {\n        frontmatter: {channel: {eq: $channel}}\n        fields: {draft: {eq: false}}\n      }\n      sort: {\n        fields: [frontmatter___lastModified]\n        order: DESC\n      }\n      limit: 10\n    ) {\n      edges {\n        node {\n          id\n          slug\n          parent {\n            ... on File {\n              sourceInstanceName\n            }\n          }\n          frontmatter {\n            title\n            date\n            updated\n            channel\n            category\n            tags\n          }\n        }\n      }\n    }\n\n    posts: allMdx(\n      filter: {\n        frontmatter: {channel: {eq: $channel}}\n        fields: {draft: {eq: false}}\n      }\n      sort: {\n        fields: [frontmatter___lastModified]\n        order: DESC\n      }\n    ) {\n      edges {\n        node {\n          id\n          slug\n          parent {\n            ... on File {\n              sourceInstanceName\n            }\n          }\n          frontmatter {\n            title\n            date\n            updated\n            channel\n            category\n            tags\n          }\n        }\n      }\n\n      categories: group(field: frontmatter___category) {\n        fieldValue\n        edges {\n          node {\n            id\n            slug\n            parent {\n              ... on File {\n                sourceInstanceName\n              }\n            }\n            frontmatter {\n              title\n              date\n              updated\n              channel\n              category\n              tags\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default ChannelSearch\n","import React from 'react'\nimport dayjs from 'dayjs'\nimport { Link } from 'gatsby'\n\nexport interface Parent {\n    sourceInstanceName: string\n}\n\nexport interface Frontmatter {\n    title: string\n    date?: string\n    updated?: string\n    channel?: string\n    category?: string\n    tags?: string[]\n}\n\nexport interface Post {\n  id: string\n  slug?: string\n  parent?: {} | Parent\n  frontmatter?: Frontmatter\n}\n\nexport interface PostListItemProps {\n  post: Post\n}\n\nconst PostListItem: React.FC<PostListItemProps> = ({\n    post: {\n      slug,\n      parent,\n      frontmatter,\n    },\n}) => {\n    const sourceInstanceName = 'sourceInstanceName' in parent ? parent.sourceInstanceName : 'pages'\n    const pathPrefix = sourceInstanceName !== 'pages' ? `/${sourceInstanceName}/` : '/'\n\n    const date = frontmatter?.date != null ? dayjs(frontmatter?.date).format('YYYY-MM-DD') : ''\n    const updated = frontmatter?.updated != null ? dayjs(frontmatter?.updated).format('YYYY-MM-DD') : ''\n\n    return (\n        <div className='mb-2'>\n          <div className=''>\n            <Link to={`${pathPrefix}${slug}`} data-label='title'>\n              {frontmatter?.title}\n            </Link>\n            {date || updated ? (\n              <div className='is-size-7' data-label='dateString'>\n                [\n                <span data-label='dateCreated'>{date}</span>\n                {date && updated ? ' / ' : ''}\n                <span data-label='dateUpdated'>{updated}</span>\n                ]\n              </div>\n            ) : ''}\n            <div className='is-size-7' data-label='tags'>\n              {frontmatter?.category != null ? (\n                <>\n                  <Link to={`/channel/${frontmatter?.channel}/category/${frontmatter?.category}/`} className='mr-2' data-label='category'>\n                    {frontmatter?.category}\n                  </Link>\n                  <span className='mr-2'>\n                    |\n                  </span>\n                </>\n              ) : ''}\n              {frontmatter?.tags?.map((tag) => (\n                <Link key={tag} to={`/channel/${frontmatter?.channel}/tags/${tag}/`} className='mr-2' data-label='tag'>\n                  {tag}\n                </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n    )\n}\n\nexport default PostListItem\n"],"names":["pageContext","data","channel","String","channelInfo","ChannelInfos","channeInfo","key","indexNoIndex","name","content","className","description","indexCategoryIndex","recentPosts","edges","map","node","id","post","posts","categories","category","fieldValue","href","slug","parent","frontmatter","sourceInstanceName","pathPrefix","date","dayjs","format","updated","Link","to","title","tags","tag"],"sourceRoot":""}