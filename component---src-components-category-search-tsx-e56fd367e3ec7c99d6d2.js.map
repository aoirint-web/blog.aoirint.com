{"version":3,"file":"component---src-components-category-search-tsx-e56fd367e3ec7c99d6d2.js","mappings":"4KAmFA,UArEoE,SAAC,GAG9D,IAFHA,EAEE,EAFFA,YACAC,EACE,EADFA,KAEMC,EAAW,aAAcF,EAAcG,OAAOH,EAAW,UAAgB,GAE/E,OACI,gCACI,gBAAC,IAAD,KACI,0CAAkBE,EAAlB,YACA,wBAAME,KAAK,SAASC,QAAQ,aAEhC,gBAAC,IAAD,MACA,2BAASC,UAAU,WACf,uBAAKA,UAAU,aACX,sBAAIA,UAAU,mBAAd,aACeJ,GAEf,0BACKD,EAAKM,MAAMC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAClB,uBAAKC,IAAKD,EAAKE,IACX,gBAAC,IAAD,CAAcC,KAAMH,IACpB,sBAAIJ,UAAU,mB,gEC0C9C,IAlDkD,SAAC,GAM5C,IAAD,MALFO,KACEC,EAIA,EAJAA,KACAC,EAGA,EAHAA,OACAC,EAEA,EAFAA,YAGIC,EAAqB,uBAAwBF,EAASA,EAAOE,mBAAqB,QAClFC,EAAoC,UAAvBD,EAAA,IAAqCA,EAArC,IAA6D,IAE1EE,EAA4B,OAArBH,MAAAA,OAAA,EAAAA,EAAaG,MAAeC,GAAAA,CAAMJ,MAAAA,OAAD,EAACA,EAAaG,MAAME,OAAO,cAAgB,GACnFC,EAAkC,OAAxBN,MAAAA,OAAA,EAAAA,EAAaM,SAAkBF,GAAAA,CAAMJ,MAAAA,OAAD,EAACA,EAAaM,SAASD,OAAO,cAAgB,GAElG,OACI,uBAAKf,UAAU,QACb,uBAAKA,UAAU,IACb,gBAAC,EAAAiB,KAAD,CAAMC,GAAE,GAAKN,EAAaJ,EAAQ,aAAW,SAC1CE,MAAAA,OADH,EACGA,EAAaS,OAEfN,GAAQG,EACP,uBAAKhB,UAAU,YAAY,aAAW,cAAtC,IAEE,wBAAM,aAAW,eAAea,GAC/BA,GAAQG,EAAU,MAAQ,GAC3B,wBAAM,aAAW,eAAeA,GAJlC,KAOE,GACJ,uBAAKhB,UAAU,YAAY,aAAW,QACV,OAAzBU,MAAAA,OAAA,EAAAA,EAAad,UACZ,gCACE,gBAAC,EAAAqB,KAAD,CAAMC,GAAE,aAAcR,MAAAA,OAAd,EAAcA,EAAaU,SAA3B,cAA+CV,MAAAA,OAA/C,EAA+CA,EAAad,UAA5D,IAAyEI,UAAU,OAAO,aAAW,YAC1GU,MAAAA,OADH,EACGA,EAAad,UAEhB,wBAAMI,UAAU,QAAhB,MAIA,GACHU,MAAAA,GAXH,UAWGA,EAAaW,YAXhB,aAWG,EAAmBlB,KAAI,SAACmB,GAAD,OACtB,gBAAC,EAAAL,KAAD,CAAMZ,IAAKiB,EAAKJ,GAAE,aAAcR,MAAAA,OAAd,EAAcA,EAAaU,SAA3B,SAA2CE,EAA3C,IAAmDtB,UAAU,OAAO,aAAW,OAC9FsB","sources":["webpack://blog-aoirint-com/./src/components/CategorySearch.tsx","webpack://blog-aoirint-com/./src/components/PostListItem.tsx"],"sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql, PageProps } from \"gatsby\"\n\nimport icon from '../images/icon.png'\nimport {\n    Navbar,\n  } from '../components'\n\nimport {\n    GetCategorySearchQuery\n} from '../../generated/graphql-types'\nimport PostListItem from './PostListItem'\n\nconst CategorySearch: React.FC<PageProps<GetCategorySearchQuery>> = ({\n    pageContext,\n    data,\n}) => {\n    const category = 'category' in pageContext ? String(pageContext['category']) : ''\n\n    return (\n        <>\n            <Helmet>\n                <title>Category: {category} · えやみぐさ</title>\n                <meta name=\"robots\" content=\"noindex\" />\n            </Helmet>\n            <Navbar />\n            <section className='section'>\n                <div className='container'>\n                    <h2 className='title is-4 mb-4'>\n                        Category: {category}\n                    </h2>\n                    <ul>\n                        {data.posts.edges.map(({ node }) => (\n                            <div key={node.id}>\n                                <PostListItem post={node} />\n                                <hr className='my-1' />\n                            </div>\n                        ))}\n                    </ul>\n                </div>\n            </section>\n        </>\n    )\n}\n\nexport const pageQuery = graphql`\n    query GetCategorySearch(\n        $category: String!\n    ) {\n        posts: allMdx(\n            filter: {\n                frontmatter: {\n                    category: {\n                        eq: $category\n                    }\n                }\n                fields: {draft: {eq: false}}\n            }\n        ) {\n            edges {\n                node {\n                    id\n                    slug\n                    parent {\n                        ... on File {\n                            sourceInstanceName\n                        }\n                    }\n                    frontmatter {\n                        title\n                        date\n                        updated\n                        channel\n                        category\n                        tags\n                    }\n                }\n            }\n        }\n    }\n`\n\nexport default CategorySearch\n","import React from 'react'\nimport dayjs from 'dayjs'\nimport { Link } from 'gatsby'\n\nexport interface Parent {\n    sourceInstanceName: string\n}\n\nexport interface Frontmatter {\n    title: string\n    date?: string\n    updated?: string\n    channel?: string\n    category?: string\n    tags?: string[]\n}\n\nexport interface Post {\n  id: string\n  slug?: string\n  parent?: {} | Parent\n  frontmatter?: Frontmatter\n}\n\nexport interface PostListItemProps {\n  post: Post\n}\n\nconst PostListItem: React.FC<PostListItemProps> = ({\n    post: {\n      slug,\n      parent,\n      frontmatter,\n    },\n}) => {\n    const sourceInstanceName = 'sourceInstanceName' in parent ? parent.sourceInstanceName : 'pages'\n    const pathPrefix = sourceInstanceName !== 'pages' ? `/${sourceInstanceName}/` : '/'\n\n    const date = frontmatter?.date != null ? dayjs(frontmatter?.date).format('YYYY-MM-DD') : ''\n    const updated = frontmatter?.updated != null ? dayjs(frontmatter?.updated).format('YYYY-MM-DD') : ''\n\n    return (\n        <div className='mb-2'>\n          <div className=''>\n            <Link to={`${pathPrefix}${slug}`} data-label='title'>\n              {frontmatter?.title}\n            </Link>\n            {date || updated ? (\n              <div className='is-size-7' data-label='dateString'>\n                [\n                <span data-label='dateCreated'>{date}</span>\n                {date && updated ? ' / ' : ''}\n                <span data-label='dateUpdated'>{updated}</span>\n                ]\n              </div>\n            ) : ''}\n            <div className='is-size-7' data-label='tags'>\n              {frontmatter?.category != null ? (\n                <>\n                  <Link to={`/channel/${frontmatter?.channel}/category/${frontmatter?.category}/`} className='mr-2' data-label='category'>\n                    {frontmatter?.category}\n                  </Link>\n                  <span className='mr-2'>\n                    |\n                  </span>\n                </>\n              ) : ''}\n              {frontmatter?.tags?.map((tag) => (\n                <Link key={tag} to={`/channel/${frontmatter?.channel}/tags/${tag}/`} className='mr-2' data-label='tag'>\n                  {tag}\n                </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n    )\n}\n\nexport default PostListItem\n"],"names":["pageContext","data","category","String","name","content","className","posts","edges","map","node","key","id","post","slug","parent","frontmatter","sourceInstanceName","pathPrefix","date","dayjs","format","updated","Link","to","title","channel","tags","tag"],"sourceRoot":""}